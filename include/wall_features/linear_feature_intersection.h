
/* ------------- Linear Feature Intersections -------------
   Class to generate a list of registration keypoints based on
     intersection points of salient linear segments in PCL 
     point clouds. 
   Intersections used because these are not required to align 
     directly with actual physical scan lines generated by the 
     sensor, helping with generality across different scans of 
     the same surface. 
*/

#include <ros/ros.h>

#include <pcl/features/normal_3d.h>

#include <eigen_conversions/eigen_msg.h>

#include <pcl/point_types.h>
#include <pcl/point_cloud.h>

#include <pcl/filters/voxel_grid.h>

#include <geometry_msgs/Transform.h>

#include <pointcloud_processing_server/pointcloud_transforms.h>

#include <pcl/sample_consensus/method_types.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/segmentation/sac_segmentation.h>
#include <pcl/segmentation/extract_clusters.h>

#include <sensor_msgs/PointCloud2.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl_ros/transforms.h>

template <typename PointType>
class LinearFeatureIntersections
{
public:
	typedef typename pcl::PointCloud<PointType> PC;
	typedef typename pcl::PointCloud<PointType>::Ptr PCP;

	LinearFeatureIntersections();
	void setInputCloud();
	void findFeatureIntersections();

	struct lineFeature
	{
		// Point Representation
		Eigen::Vector3f point_start;
		Eigen::Vector3f point_end;
		// Vector Representation
		Eigen::Vector3f direction;
		float length;
		// Cloud
		PCP cloud;
	};

private:
	std::vector<lineFeature> lineFeatureList;
	PCP inputCloud;
	
	void generateLineSegment();
	void splitLineSegment();
	void thresholdLineSegment();
};